verifyToken:
  handler: src/handlers/auth/verifyToken.handler
hello:
  handler: src/handlers/hello/hello.handler
  description: 'offline example'
  events:
    - httpApi:
        path: /hello
        method: GET
createUser:
  handler: src/handlers/users/createUser.handler
  events:
    - httpApi:
        path: /users
        method: POST
  environment:
    TABLE_NAME_USERS: ${env:TABLE_NAME_USERS}
    TABLE_NAME_AUTH: ${env:TABLE_NAME_AUTH}
getUsers:
  handler: src/handlers/users/getUsers.handler
  events:
    - httpApi:
        path: /users
        method: GET
        authorizer:
          name: verifyToken
  environment:
    TABLE_NAME_USERS: ${env:TABLE_NAME_USERS}
getUser:
  handler: src/handlers/users/getUser.handler
  events:
    - httpApi:
        path: /users/{userId}
        method: GET
        authorizer:
          name: verifyToken
  environment:
    TABLE_NAME_USERS: ${env:TABLE_NAME_USERS}
login:
  handler: src/handlers/auth/login.handler
  events:
    - httpApi:
        path: /login
        method: POST
  environment:
    TABLE_NAME_AUTH: ${env:TABLE_NAME_AUTH}
    TABLE_NAME_USERS: ${env:TABLE_NAME_USERS}
logout:
  handler: src/handlers/auth/logout.handler
  events:
    - httpApi:
        path: /logout
        method: POST
        authorizer:
          name: verifyToken
isAuthorized:
  handler: src/handlers/auth/isAuthorized.handler
  events:
    - httpApi:
        path: /auth
        method: GET
getUserPosts:
  handler: src/handlers/posts/getUserPosts.handler
  events:
    - httpApi:
        path: /posts/{userId}
        method: GET
        authorizer:
          name: verifyToken
  environment:
    TABLE_NAME_POSTS: ${env:TABLE_NAME_POSTS}
createPost:
  handler: src/handlers/posts/createPost.handler
  events:
    - httpApi:
        path: /posts
        method: POST
        authorizer:
          name: verifyToken
  environment:
    TABLE_NAME_POSTS: ${env:TABLE_NAME_POSTS}
updatePost:
  handler: src/handlers/posts/updatePost.handler
  events:
    - httpApi:
        path: /posts
        method: PATCH
        authorizer:
          name: verifyToken
  environment:
    TABLE_NAME_POSTS: ${env:TABLE_NAME_POSTS}
deletePost:
  handler: src/handlers/posts/deletePost.handler
  events:
    - httpApi:
        path: /posts/{postId}
        method: DELETE
        authorizer:
          name: verifyToken
getMessages:
  handler: src/handlers/messages/getMessages.handler
  events:
    - httpApi:
        path: /messages
        method: GET
        authorizer:
          name: verifyToken
  environment:
    TABLE_NAME_MESSAGES: ${env:TABLE_NAME_MESSAGES}
createMessage:
  handler: src/handlers/messages/createMessage.handler
  events:
    - httpApi:
        path: /messages
        method: POST
        authorizer:
          name: verifyToken
  environment:
    TABLE_NAME_MESSAGES: ${env:TABLE_NAME_MESSAGES}
# deleteUser:
#   handler: src/handlers/users.deleteUser
#   events:
#     - httpApi:
#         path: /users
#         method: DELETE
# webhook:
#   handler: src/handlers/handler.webhook
#   events:
#     - httpApi:
#         method: GET
#         path: /s3
# s3hook:
#   handler: src/handlers/handler.s3hook
#   events:
#     - httpApi:
#         path: /s3hook
#         method: GET
